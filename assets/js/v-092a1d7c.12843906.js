"use strict";(self.webpackChunktsoa_docs=self.webpackChunktsoa_docs||[]).push([[262],{5621:(e,a,n)=>{n.r(a),n.d(a,{data:()=>o});const o={key:"v-092a1d7c",path:"/faq.html",title:"FAQ",lang:"en-US",frontmatter:{title:"FAQ",lang:"en-US"},excerpt:"",headers:[{level:2,title:"Can I use OpenAPI 3 instead of OpenAPI 2 (formerly Swagger)?",slug:"can-i-use-openapi-3-instead-of-openapi-2-formerly-swagger",children:[]},{level:2,title:"How to ensure no additional properties come in at runtime",slug:"how-to-ensure-no-additional-properties-come-in-at-runtime",children:[]},{level:2,title:"Dealing with duplicate model names",slug:"dealing-with-duplicate-model-names",children:[]},{level:2,title:"How can I get the most from my OAS?",slug:"how-can-i-get-the-most-from-my-oas",children:[]}],filePathRelative:"faq.md",git:{updatedTime:1588193186e3,contributors:[{name:"WoH",email:"wolfgang.hobmaier@sensoring.de",commits:1}]}}},4121:(e,a,n)=>{n.r(a),n.d(a,{default:()=>T});var o=n(6252);const t=(0,o._)("h1",{id:"faq",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#faq","aria-hidden":"true"},"#"),(0,o.Uk)(" FAQ")],-1),i=(0,o._)("h2",{id:"can-i-use-openapi-3-instead-of-openapi-2-formerly-swagger",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#can-i-use-openapi-3-instead-of-openapi-2-formerly-swagger","aria-hidden":"true"},"#"),(0,o.Uk)(" Can I use OpenAPI 3 instead of OpenAPI 2 (formerly Swagger)?")],-1),r=(0,o.Uk)("Yes, set "),s=(0,o._)("code",null,"spec.specVersion",-1),l=(0,o.Uk)(" to "),d=(0,o._)("code",null,"3",-1),c=(0,o.Uk)(" in your "),p=(0,o._)("code",null,"tsoa.json",-1),u=(0,o.Uk)(" file. See more config options by looking at "),h={href:"https://github.com/lukeautry/tsoa/blob/master/src/config.ts",target:"_blank",rel:"noopener noreferrer"},m=(0,o.Uk)("the config type definition"),g=(0,o.Uk)("."),f=(0,o._)("h2",{id:"how-to-ensure-no-additional-properties-come-in-at-runtime",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#how-to-ensure-no-additional-properties-come-in-at-runtime","aria-hidden":"true"},"#"),(0,o.Uk)(" How to ensure no additional properties come in at runtime")],-1),k=(0,o.Uk)("By default, OpenAPI allows for models to have "),w={href:"https://swagger.io/docs/specification/data-models/dictionaries/",target:"_blank",rel:"noopener noreferrer"},y=(0,o._)("code",null,"additionalProperties",-1),b=(0,o.Uk)(". If you would like to ensure at runtime that the data has only the properties defined in your models, set the "),_=(0,o._)("code",null,"noImplicitAdditionalProperties",-1),v=(0,o.Uk)(),U={href:"https://github.com/lukeautry/tsoa/blob/master/src/config.ts",target:"_blank",rel:"noopener noreferrer"},I=(0,o.Uk)("config"),A=(0,o.Uk)(" option to either "),x=(0,o._)("code",null,'"silently-remove-extras"',-1),S=(0,o.Uk)(" or "),P=(0,o._)("code",null,'"throw-on-extras"',-1),q=(0,o.Uk)(". Caveats:"),O=(0,o.uE)('<ul><li>The following types will always allow additional properties due to the nature of the way they work: <ul><li>The <code>any</code> type</li><li>An indexed type (which explicitly allows additional properties) like <code>export interface IStringToStringDictionary { [key: string] : string }</code></li></ul></li><li>If you are using tsoa for an existing service that has consumers... <ul><li>you will need to inform your consumers before setting <code>noImplicitAdditionalProperties</code> to <code>&quot;throw-on-extras&quot;</code> since it would be a breaking change (due to the fact that request bodies that previously worked would now get an error).</li></ul></li><li>Regardless, <code>&quot;noImplicitAdditionalProperties&quot; : &quot;silently-remove-extras&quot;</code> is a great choice for both legacy AND new APIs (since this mirrors the behavior of C# serializers and other popular JSON serializers).</li></ul><h2 id="dealing-with-duplicate-model-names" tabindex="-1"><a class="header-anchor" href="#dealing-with-duplicate-model-names" aria-hidden="true">#</a> Dealing with duplicate model names</h2><p>If you have multiple models with the same name, you may get errors indicating that there are multiple matching models. If you&#39;d like to designate a class/interface as the &#39;canonical&#39; version of a model, add a jsdoc element marking it as such:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@tsoaModel</span>\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">MyModel</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="how-can-i-get-the-most-from-my-oas" tabindex="-1"><a class="header-anchor" href="#how-can-i-get-the-most-from-my-oas" aria-hidden="true">#</a> How can I get the most from my OAS?</h2>',5),C=(0,o.Uk)("Now that you have a OpenAPI Specification (OAS) (swagger.json), you can use all kinds of amazing tools that generate documentation, client SDKs, and more "),D={href:"http://openapi.tools//",target:"_blank",rel:"noopener noreferrer"},H=(0,o.Uk)("here"),W={},T=(0,n(3744).Z)(W,[["render",function(e,a){const n=(0,o.up)("OutboundLink");return(0,o.wg)(),(0,o.iD)(o.HY,null,[t,i,(0,o._)("p",null,[r,s,l,d,c,p,u,(0,o._)("a",h,[m,(0,o.Wm)(n)]),g]),f,(0,o._)("p",null,[k,(0,o._)("a",w,[y,(0,o.Wm)(n)]),b,_,v,(0,o._)("a",U,[I,(0,o.Wm)(n)]),A,x,S,P,q]),O,(0,o._)("p",null,[C,(0,o._)("a",D,[H,(0,o.Wm)(n)])])],64)}]])},3744:(e,a)=>{a.Z=(e,a)=>{for(const[n,o]of a)e[n]=o;return e}}}]);