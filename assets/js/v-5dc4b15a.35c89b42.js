"use strict";(self.webpackChunktsoa_docs=self.webpackChunktsoa_docs||[]).push([[974],{9164:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-5dc4b15a",path:"/getting-started.html",title:"Getting started",lang:"en-US",frontmatter:{title:"Getting started",lang:"en-US"},excerpt:"",headers:[{level:2,title:"Initializing our project",slug:"initializing-our-project",children:[]},{level:2,title:"Configuring tsoa and typescript",slug:"configuring-tsoa-and-typescript",children:[]},{level:2,title:"Defining our first model",slug:"defining-our-first-model",children:[]},{level:2,title:"Defining a simple controller",slug:"defining-a-simple-controller",children:[]},{level:2,title:"Creating our express server",slug:"creating-our-express-server",children:[]},{level:2,title:"Building the routes file",slug:"building-the-routes-file",children:[]},{level:2,title:"What's next?",slug:"what-s-next",children:[]}],filePathRelative:"getting-started.md",git:{updatedTime:1633172659e3,contributors:[{name:"WoH",email:"wolfgang.hobmaier@sensoring.de",commits:15}]}}},1798:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Z});var e=a(6252),t=a(3577);const p=(0,e._)("h1",{id:"getting-started",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#getting-started","aria-hidden":"true"},"#"),(0,e.Uk)(" Getting started")],-1),o=(0,e._)("p",null,[(0,e._)("strong",null,"What we will talk about:")],-1),r={class:"table-of-contents"},l=(0,e.Uk)("Initializing our project"),c=(0,e.Uk)("Configuring tsoa and typescript"),i=(0,e.Uk)("Defining our first model"),u=(0,e.Uk)("Defining a simple controller"),k=(0,e.Uk)("Creating our express server"),d=(0,e.Uk)("Building the routes file"),b=(0,e.Uk)("What's next?"),m={class:"custom-container warning"},g=(0,e._)("p",{class:"custom-container-title"},"COMPATIBILITY NOTE",-1),h=(0,e.Uk)("This guide requires Node.js >= 8 and will target "),f={href:"https://expressjs.com",target:"_blank",rel:"noopener noreferrer"},y=(0,e.Uk)("express"),q=(0,e.Uk)(". We currently recommend using "),v={href:"https://yarnpkg.com/en/",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("Yarn"),x=(0,e.Uk)(", npm should work but was not tested."),U=(0,e.uE)('<h2 id="initializing-our-project" tabindex="-1"><a class="header-anchor" href="#initializing-our-project" aria-hidden="true">#</a> Initializing our project</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Create a new folder for our project</span>\n<span class="token function">mkdir</span> tsoa-project\n<span class="token builtin class-name">cd</span> tsoa-project\n\n<span class="token comment"># Create a package.json and initialize git</span>\n<span class="token function">git</span> init\n<span class="token function">yarn</span> init -y\n\n<span class="token comment"># Add our dependencies</span>\n<span class="token function">yarn</span> <span class="token function">add</span> tsoa express body-parser\n<span class="token function">yarn</span> <span class="token function">add</span> -D typescript @types/node @types/express @types/body-parser\n\n<span class="token comment"># Initialize tsconfig.json</span>\n<span class="token function">yarn</span> run tsc --init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="configuring-tsoa-and-typescript" tabindex="-1"><a class="header-anchor" href="#configuring-tsoa-and-typescript" aria-hidden="true">#</a> Configuring tsoa and typescript</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// tsoa.json</span>\n<span class="token punctuation">{</span>\n  <span class="token string">&quot;entryFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/app.ts&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;noImplicitAdditionalProperties&quot;</span><span class="token operator">:</span> <span class="token string">&quot;throw-on-extras&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;controllerPathGlobs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*Controller.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;spec&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;outputDirectory&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;specVersion&quot;</span><span class="token operator">:</span> <span class="token number">3</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;routes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;routesDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Let&#39;s take a look at what we are telling tsoa here: First, we specify where the entry point to our application will be. Most likely, this file will be called <code>index.ts</code> or <code>app.ts</code>. We will create this file in a second.</p><p>Afterwards, the <code>controllerPathGlob</code> tells tsoa where it can look for controllers so we don&#39;t manually have to import them.</p><p>Next, we tell tsoa how strict excess property checking (to use the TypeScript term) or additionalProperty checking (to use OpenAPI terminology) should be. We can choose to &quot;ignore&quot; additional Properties (the OpenAPI default), remove them during validation (&quot;silently-remove-extras&quot;), or throw an Error back to the Client (&quot;throw-on-extras&quot;). Next, we set the output directory for out OpenAPI specification (OAS) and our <code>routes.ts</code> file, which we will talk about later.</p><p>We set the <code>specVersion</code> to <code>3</code> so tsoa will generate an OpenAPI v3 specification.</p>',8),P=(0,e.Uk)("For a full list of all the possible config, take a look at the "),_={href:"https://tsoa-community.github.io/reference/interfaces/_tsoa_runtime.config-1.html",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("API Reference"),C=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>While the default ts config will work for this guide, an improved tsconfig.json would look something like this:</p><details class="custom-container details"><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* Basic Options */</span>\n    <span class="token string">&quot;incremental&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es6&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>\n\n    <span class="token comment">/* Strict Type-Checking Options */</span>\n    <span class="token string">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;strictFunctionTypes&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;strictBindCallApply&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;strictPropertyInitialization&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;noImplicitThis&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;alwaysStrict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\n    <span class="token comment">/* Additional Checks */</span>\n    <span class="token string">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;noImplicitReturns&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;noFallthroughCasesInSwitch&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\n    <span class="token comment">/* Module Resolution Options */</span>\n    <span class="token string">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\n    <span class="token comment">/* Experimental Options */</span>\n    <span class="token string">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;emitDecoratorMetadata&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\n    <span class="token comment">/* Advanced Options */</span>\n    <span class="token string">&quot;forceConsistentCasingInFileNames&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div></details></div><h2 id="defining-our-first-model" tabindex="-1"><a class="header-anchor" href="#defining-our-first-model" aria-hidden="true">#</a> Defining our first model</h2><p>If you already have an OpenAPI Specification, you can use existing OpenAPI tooling to generate your Models or Interfaces. Otherwise, let&#39;s define a <code>User</code> Interface in <code>src/users/user.ts</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  status<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Sad&quot;</span><span class="token punctuation">;</span>\n  phoneNumbers<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Before we start defining our Controller, it&#39;s usually a good idea to create a Service that handles interaction with our Models instead of shoving all that logic into the controller layer.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/users/usersService.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./user&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// A post request should not contain an id.</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">UserCreationParams</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;name&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;phoneNumbers&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersService</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      id<span class="token punctuation">,</span>\n      email<span class="token operator">:</span> <span class="token string">&quot;jane@doe.com&quot;</span><span class="token punctuation">,</span>\n      name<span class="token operator">:</span> name <span class="token operator">??</span> <span class="token string">&quot;Jane Doe&quot;</span><span class="token punctuation">,</span>\n      status<span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span><span class="token punctuation">,</span>\n      phoneNumbers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token function">create</span><span class="token punctuation">(</span>userCreationParams<span class="token operator">:</span> UserCreationParams<span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      id<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Random</span>\n      status<span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span>userCreationParams<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="defining-a-simple-controller" tabindex="-1"><a class="header-anchor" href="#defining-a-simple-controller" aria-hidden="true">#</a> Defining a simple controller</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/users/usersController.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  Body<span class="token punctuation">,</span>\n  Controller<span class="token punctuation">,</span>\n  Get<span class="token punctuation">,</span>\n  Path<span class="token punctuation">,</span>\n  Post<span class="token punctuation">,</span>\n  Query<span class="token punctuation">,</span>\n  Route<span class="token punctuation">,</span>\n  SuccessResponse<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tsoa&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./user&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersService<span class="token punctuation">,</span> UserCreationParams <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./usersService&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&quot;{userId}&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">getUser</span><span class="token punctuation">(</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Path</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> userId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UsersService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">SuccessResponse</span></span><span class="token punctuation">(</span><span class="token string">&quot;201&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Created&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Custom success response</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">createUser</span><span class="token punctuation">(</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> requestBody<span class="token operator">:</span> UserCreationParams\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set return status 201</span>\n    <span class="token keyword">new</span> <span class="token class-name">UsersService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>Let&#39;s take a step back and talk about what&#39;s going on here. As you can hopefully already tell, we are defining a <code>/users/</code> route using the <code>@Route()</code> decorator above our controller class.</p>',9),j=(0,e.Uk)("Additionally, we define 2 methods: "),A=(0,e._)("code",null,"getUser",-1),S=(0,e.Uk)(" and "),W=(0,e._)("code",null,"createUser",-1),O=(0,e.Uk)(". The "),R=(0,e._)("code",null,"@Get()",-1),T=(0,e.Uk)(" decorator in combination with our base route "),D=(0,e._)("code",null,"/users/",-1),B=(0,e.Uk)(" will tell tsoa to invoke this method for every "),z=(0,e._)("em",null,"GET",-1),N=(0,e.Uk)(" request to "),E=(0,e.Uk)(", where "),M=(0,e._)("em",null,"{userId}",-1),G=(0,e.Uk)(" is a template."),L=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">OpenAPI Path Templating</p><p>Routing in tsoa is closely mirroring OpenAPI&#39;s path templating for compatibility reasons. Path templating refers to the usage of template expressions, delimited by curly braces ({}), to mark a section of a URL path as replaceable using path parameters.</p></div><p>Under the hood, this would be like defining <code>app.get(&#39;users/:userId&#39;)</code>. While express allows you to use regex-ish route definitions, we prefer to split the routing and the validation more clearly. Because you&#39;re asking for the <em>id</em> to be a <em>number</em> by using the <code>@Path()</code> decorator with an <code>userId</code> of type number, tsoa will reject passing i.e. a <em>string</em> here. Similarly, if you want to accept a <em>string</em> with a certain pattern, you can do that using JSON Schema annotations. You can learn more about that <a href="#what-s-next">here</a>.</p><p>tsoa will allow 4 types of parameters: Path parameters (using <code>@Path()</code>), Query Parameters (<code>@Query()</code>), Header Parameters (<code>@Header()</code>) and Body Parameters (<code>@Body()</code> or individual properties using <code>@BodyProp()</code>).</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If the parameter name is equal to the http message parameter, you may omit the argument to the decorators, otherwise you may provide an argument:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token string">&#39;my-query&#39;</span><span class="token punctuation">)</span> myQuery<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div>',4),H=(0,e.Uk)("A full list of all the decorators can be found "),F={href:"https://tsoa-community.github.io/reference/modules/_tsoa_runtime.html#body-1",target:"_blank",rel:"noopener noreferrer"},Q=(0,e.Uk)("here"),Y=(0,e.Uk)("."),J=(0,e.uE)('<div class="custom-container warning"><p class="custom-container-title">Caveat</p><p>Always use a named export (<code>export class C</code>) on the controller class in order for tsoa to correctly pick it up. Default exports (<code>export default class C</code>) are currently not supported.</p></div><h2 id="creating-our-express-server" tabindex="-1"><a class="header-anchor" href="#creating-our-express-server" aria-hidden="true">#</a> Creating our express server</h2><p>Let&#39;s now create an <code>app.ts</code> and a <code>server.ts</code> file in our source directory like this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/app.ts</span>\n<span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> bodyParser <span class="token keyword">from</span> <span class="token string">&quot;body-parser&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterRoutes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../build/routes&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Use body parser to read sent json payloads</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n  bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    extended<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">RegisterRoutes</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/server.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">3000</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="building-the-routes-file" tabindex="-1"><a class="header-anchor" href="#building-the-routes-file" aria-hidden="true">#</a> Building the routes file</h2><p>At this point you may have noticed that TypeScript will not find the <code>RegisterRoutes</code> import from <code>build/routes</code>. That&#39;s because we haven&#39;t asked tsoa to create that yet. Let&#39;s do that now:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> run tsoa routes\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Now your routes.ts file should&#39;ve been created and you can compile TypeScript and start your server:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> run tsc --outDir build --experimentalDecorators\nnode build/src/server.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You may want to add these scripts to your <code>package.json</code> at this point:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build/src/server.js&quot;</span><span class="token punctuation">,</span>\n<span class="token string">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token string">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsoa spec-and-routes &amp;&amp; tsc&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node build/src/server.js&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><h2 id="what-s-next" tabindex="-1"><a class="header-anchor" href="#what-s-next" aria-hidden="true">#</a> What&#39;s next?</h2><ul><li>Manually invoking <code>tsc</code> and <code>tsoa routes</code> in development isn&#39;t very convenient.</li><li>Inspecting our first OpenAPI specification and supercharging our feedback loop by serving an up-to-date version of SwaggerUI during development.</li></ul><p>We can improve that using <a href="./live-reloading">live reloading</a>.</p><ul><li>Improving our response for validation errors using proper <a href="./error-handling">error handling</a></li><li>Using <a href="./descriptions">Descriptions</a>, <a href="./examples">Examples</a> and <a href="./annotations">Annotations</a> for advanced validation and better documentation</li></ul>',15),V={},Z=(0,a(3744).Z)(V,[["render",function(n,s){const a=(0,e.up)("RouterLink"),V=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,o,(0,e._)("nav",r,[(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#initializing-our-project"},{default:(0,e.w5)((()=>[l])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#configuring-tsoa-and-typescript"},{default:(0,e.w5)((()=>[c])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#defining-our-first-model"},{default:(0,e.w5)((()=>[i])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#defining-a-simple-controller"},{default:(0,e.w5)((()=>[u])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#creating-our-express-server"},{default:(0,e.w5)((()=>[k])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#building-the-routes-file"},{default:(0,e.w5)((()=>[d])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#what-s-next"},{default:(0,e.w5)((()=>[b])),_:1})])])]),(0,e._)("div",m,[g,(0,e._)("p",null,[h,(0,e._)("a",f,[y,(0,e.Wm)(V)]),q,(0,e._)("a",v,[w,(0,e.Wm)(V)]),x])]),U,(0,e._)("p",null,[P,(0,e._)("a",_,[I,(0,e.Wm)(V)])]),C,(0,e._)("p",null,[j,A,S,W,O,R,T,D,B,z,N,(0,e._)("code",null,"/users/"+(0,t.zw)(n.userId),1),E,M,G]),L,(0,e._)("p",null,[H,(0,e._)("a",F,[Q,(0,e.Wm)(V)]),Y]),J],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);