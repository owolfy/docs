"use strict";(self.webpackChunktsoa_docs=self.webpackChunktsoa_docs||[]).push([[607],{9137:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-63f25852",path:"/examples.html",title:"Examples",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Response examples",slug:"response-examples",children:[{level:3,title:"Default response",slug:"default-response",children:[]},{level:3,title:"Additional Responses",slug:"additional-responses",children:[]}]},{level:2,title:"Parameter examples",slug:"parameter-examples",children:[]},{level:2,title:"Model examples",slug:"model-examples",children:[]},{level:2,title:"Property examples",slug:"property-examples",children:[]}],filePathRelative:"examples.md",git:{updatedTime:1603998716e3,contributors:[{name:"WoH",email:"wolfgang.hobmaier@sensoring.de",commits:6},{name:"Clooooode",email:"jackey8616@gmail.com",commits:1}]}}},6508:(s,n,a)=>{a.r(n),a.d(n,{default:()=>cs});var e=a(6252);const t=(0,e._)("h1",{id:"examples",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#examples","aria-hidden":"true"},"#"),(0,e.Uk)(" Examples")],-1),p=(0,e.Uk)("Study after study shows that examples are a crucial part of learning new APIs ("),o={href:"https://www.cs.mcgill.ca/~martin/papers/software2009a.pdf",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("1"),r=(0,e.Uk)(", "),c={href:"https://sigdoc.acm.org/cdq/how-developers-use-api-documentation-an-observation-study/",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("2"),u=(0,e.Uk)(", "),k={href:"https://ase.cpsc.ucalgary.ca/wp-content/uploads/2018/05/A-Study-of-the-Effectiveness-of-Usage-Examples-in-REST-API-Documentation.pdf",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("3"),b=(0,e.Uk)("). While certain issues, like type mismatches can be avoided by inferring examples from the JSON Schema (like the examples SwaggerUI automatically generates*), it's often a lot more intuitive if we provide certain examples ourselves."),d=(0,e._)("p",null,'* Which is limited as well, i.e. patterns will be ignored, and just sending the string "string" every time is somewhat suboptimal if that string actually carries meaning.',-1),h={class:"custom-container tip"},g=(0,e._)("p",{class:"custom-container-title"},"TIP",-1),f=(0,e.Uk)("tsoa does not (yet) check your JSDoc examples. Incorrect examples will not break your compilation, because OpenAPI "),v={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#fixed-fields-20",target:"_blank",rel:"noopener noreferrer"},y=(0,e.Uk)("explicitly allows anything"),x=(0,e.Uk)(". You may also just want to demonstrate tsoa's validation üòè"),w=(0,e.Uk)("We recommend using a linter (we love "),U={href:"https://stoplight.io/p/docs/gh/stoplightio/spectral",target:"_blank",rel:"noopener noreferrer"},q=(0,e.Uk)("Spectral"),_=(0,e.Uk)(") to ensure your specifications aren't just correct, but also contain "),I=(0,e._)("a",{href:"./descriptions"},"descriptions",-1),A=(0,e.Uk)(" and correct examples."),P=(0,e._)("div",{class:"custom-container warning"},[(0,e._)("p",{class:"custom-container-title"},"WARNING"),(0,e._)("p",null,"OpenAPI 2 only allows one example per model/property/parameter. If you defined more than one example in OpenAPI 2, tsoa will only apply first one as value. OpenAPI 3 examples is now supported!")],-1),S=(0,e._)("h2",{id:"response-examples",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#response-examples","aria-hidden":"true"},"#"),(0,e.Uk)(" Response examples")],-1),O=(0,e.Uk)("In order to provide an example response, tsoa offers a "),W={href:"https://tsoa-community.github.io/reference/modules/_tsoa_runtime.html#example-1e",target:"_blank",rel:"noopener noreferrer"},N=(0,e._)("code",null,"@Example()",-1),R=(0,e.Uk)(" Decorator."),C=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Providing the type you&#39;re writing the example for as a type argument <code>T</code> to</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Example</span></span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>example<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>is not necessary, but may help you catch bugs.</p></div>',1),D=(0,e.Uk)("This decorator is used to specify a response for the default response, but you can add examples for other responses ("),E={href:"https://tsoa-community.github.io/reference/modules/_tsoa_runtime.html#response-1",target:"_blank",rel:"noopener noreferrer"},j=(0,e._)("code",null,"@Response()",-1),T=(0,e.Uk)(", used for additional responses, often caused by "),F=(0,e._)("a",{href:"./error-handling#specifying-error-response-types-for-openapi"},"errors",-1),H=(0,e.Uk)(" by providing them as the third argument as well."),G=(0,e.uE)('<h3 id="default-response" tabindex="-1"><a class="header-anchor" href="#default-response" aria-hidden="true">#</a> Default response</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Example</span></span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token string">&quot;52907745-7672-470e-a803-a2f8feb52944&quot;</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;tsoa user&quot;</span><span class="token punctuation">,</span>\n    email<span class="token operator">:</span> <span class="token string">&quot;hello@tsoa.com&quot;</span><span class="token punctuation">,</span>\n    phoneNumbers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    status<span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&quot;{userId}&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">getUser</span><span class="token punctuation">(</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Path</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> userId<span class="token operator">:</span> <span class="token constant">UUID</span><span class="token punctuation">,</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> name<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UsersService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="additional-responses" tabindex="-1"><a class="header-anchor" href="#additional-responses" aria-hidden="true">#</a> Additional Responses</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/**\n   * Add a new user. Remember that the demo API will not persist this data.\n   *\n   */</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">SuccessResponse</span></span><span class="token punctuation">(</span><span class="token string">&quot;201&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Created&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Custom success response</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Response</span></span><span class="token operator">&lt;</span>ValidateErrorJSON<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">422</span><span class="token punctuation">,</span> <span class="token string">&quot;Validation Failed&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    message<span class="token operator">:</span> <span class="token string">&quot;Validation failed&quot;</span><span class="token punctuation">,</span>\n    details<span class="token operator">:</span> <span class="token punctuation">{</span>\n      requestBody<span class="token operator">:</span> <span class="token punctuation">{</span>\n        message<span class="token operator">:</span> <span class="token string">&quot;id is an excess property and therefore not allowed&quot;</span><span class="token punctuation">,</span>\n        value<span class="token operator">:</span> <span class="token string">&quot;52907745-7672-470e-a803-a2f8feb52944&quot;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">createUser</span><span class="token punctuation">(</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> requestBody<span class="token operator">:</span> UserCreationParams\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set return status 201</span>\n    <span class="token keyword">new</span> <span class="token class-name">UsersService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="parameter-examples" tabindex="-1"><a class="header-anchor" href="#parameter-examples" aria-hidden="true">#</a> Parameter examples</h2>',5),J={class:"custom-container warning"},B=(0,e._)("p",{class:"custom-container-title"},"WARNING",-1),Y=(0,e._)("p",null,[(0,e.Uk)("You may expect to see an example for a type reference (to a type alias, interface or a class) if you set one. However, since it'll be transformed to a reference ("),(0,e._)("em",null,"$ref"),(0,e.Uk)(") to the schema, the example must be ignored, since any properties that are placed next to "),(0,e._)("em",null,"$ref"),(0,e.Uk)(" (OpenAPI's mechanism to link to the UserCreationParams schema) must be ignored.")],-1),V=(0,e.Uk)("For more info, check out the relevant parts of the "),$={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schemaObject",target:"_blank",rel:"noopener noreferrer"},M=(0,e.Uk)("OpenAPI Specification"),Q=(0,e.Uk)(" and "),Z={href:"https://tools.ietf.org/html/draft-wright-json-schema-00#section-7",target:"_blank",rel:"noopener noreferrer"},L=(0,e.Uk)("JSON Schema Core"),z=(0,e.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/**\n   * <span class="token keyword">@example</span> userId &quot;52907745-7672-470e-a803-a2f8feb52944&quot;\n   * <span class="token keyword">@example</span> userId &quot;e77ef155-bd12-46f0-8559-bf55f6dd4c63&quot;\n   */</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&quot;{userId}&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">getUser</span><span class="token punctuation">(</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Path</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> userId<span class="token operator">:</span> <span class="token constant">UUID</span><span class="token punctuation">,</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> name<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UsersService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="model-examples" tabindex="-1"><a class="header-anchor" href="#model-examples" aria-hidden="true">#</a> Model examples</h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Both OpenAPI 2 and 3 supports only single example in model. If you use more than one example, it will only apply the first one.</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/**\n * Stringified UUIDv4.\n * See [RFC 4112](https://tools.ietf.org/html/rfc4122)\n * <span class="token keyword">@pattern</span> [0-9A-Fa-f]<span class="token punctuation">{</span>8<span class="token punctuation">}</span>-[0-9A-Fa-f]<span class="token punctuation">{</span>4<span class="token punctuation">}</span>-4[0-9A-Fa-f]<span class="token punctuation">{</span>3<span class="token punctuation">}</span>-[89ABab][0-9A-Fa-f]<span class="token punctuation">{</span>3<span class="token punctuation">}</span>-[0-9A-Fa-f]<span class="token punctuation">{</span>12<span class="token punctuation">}</span>\n * <span class="token keyword">@example</span> &quot;52907745-7672-470e-a803-a2f8feb52944&quot;\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">UUID</span></span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line">¬†</div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Any example with object or array should be in correct JSON-format. Otherwise, tsoa will throws error while generating OAS.</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/**\n * User objects allow you to associate actions performed in the system with the user that performed them.\n * The User object contains common information across every user in the system regardless of status and role.\n *\n *\n * <span class="token keyword">@example</span> <span class="token punctuation">{</span>\n *  &quot;id&quot;: &quot;52907745-7672-470e-a803-a2f8feb52944&quot;,\n *  &quot;name&quot;: &quot;John Doe&quot;,\n *  &quot;phoneNumbers&quot;: []\n * <span class="token punctuation">}</span>\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token constant">UUID</span><span class="token punctuation">;</span>\n\n  <span class="token doc-comment comment">/**\n   * The email the user used to register his account\n   */</span>\n  email<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  status<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Sad&quot;</span><span class="token punctuation">;</span>\n  phoneNumbers<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="property-examples" tabindex="-1"><a class="header-anchor" href="#property-examples" aria-hidden="true">#</a> Property examples</h2>',7),K={class:"custom-container warning"},X=(0,e._)("p",{class:"custom-container-title"},"WARNING",-1),ss=(0,e._)("p",null,[(0,e.Uk)("You may expect to see an example for the "),(0,e._)("code",null,"id"),(0,e.Uk)(" if you set one. However, since it'll be transformed to a reference to the UUID schema, the example must be ignored, since any properties that are placed next to "),(0,e._)("em",null,"$ref"),(0,e.Uk)(" (OpenAPI's mechanism to link to the UUID schema) must be ignored.")],-1),ns=(0,e.Uk)("For more info, check out the relevant parts of the "),as={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schemaObject",target:"_blank",rel:"noopener noreferrer"},es=(0,e.Uk)("OpenAPI Specification"),ts=(0,e.Uk)(" and "),ps={href:"https://tools.ietf.org/html/draft-wright-json-schema-00#section-7",target:"_blank",rel:"noopener noreferrer"},os=(0,e.Uk)("JSON Schema Core"),ls=(0,e.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token constant">UUID</span><span class="token punctuation">;</span>\n\n  <span class="token doc-comment comment">/**\n   * The email the user used to register his account\n   */</span>\n  email<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n  <span class="token doc-comment comment">/**\n   * <span class="token keyword">@example</span> &quot;Happy&quot;\n   */</span>\n  status<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Sad&quot;</span><span class="token punctuation">;</span>\n\n  phoneNumbers<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',1),rs={},cs=(0,a(3744).Z)(rs,[["render",function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,(0,e._)("a",o,[l,(0,e.Wm)(a)]),r,(0,e._)("a",c,[i,(0,e.Wm)(a)]),u,(0,e._)("a",k,[m,(0,e.Wm)(a)]),b]),d,(0,e._)("div",h,[g,(0,e._)("p",null,[f,(0,e._)("a",v,[y,(0,e.Wm)(a)]),x]),(0,e._)("p",null,[w,(0,e._)("a",U,[q,(0,e.Wm)(a)]),_,I,A])]),P,S,(0,e._)("p",null,[O,(0,e._)("a",W,[N,(0,e.Wm)(a)]),R]),C,(0,e._)("p",null,[D,(0,e._)("a",E,[j,(0,e.Wm)(a)]),T,F,H]),G,(0,e._)("div",J,[B,Y,(0,e._)("p",null,[V,(0,e._)("a",$,[M,(0,e.Wm)(a)]),Q,(0,e._)("a",Z,[L,(0,e.Wm)(a)])])]),z,(0,e._)("div",K,[X,ss,(0,e._)("p",null,[ns,(0,e._)("a",as,[es,(0,e.Wm)(a)]),ts,(0,e._)("a",ps,[os,(0,e.Wm)(a)])])]),ls],64)}]])},3744:(s,n)=>{n.Z=(s,n)=>{for(const[a,e]of n)s[a]=e;return s}}}]);