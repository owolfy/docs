"use strict";(self.webpackChunktsoa_docs=self.webpackChunktsoa_docs||[]).push([[400],{1489:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-6c4a9b4a",path:"/di.html",title:"Dependency injection or IOC",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"IoC Module",slug:"ioc-module",children:[{level:3,title:"Example",slug:"example",children:[]}]},{level:2,title:"InversifyJS",slug:"inversifyjs",children:[]},{level:2,title:"TSyringe",slug:"tsyringe",children:[]},{level:2,title:"typescript-ioc",slug:"typescript-ioc",children:[]}],filePathRelative:"di.md",git:{updatedTime:1615736653e3,contributors:[{name:"WoH",email:"wolfgang.hobmaier@sensoring.de",commits:3},{name:"Dan Dombrowski",email:"djdmbrwsk@gmail.com",commits:2},{name:"Alex Ward",email:"alxwrd@googlemail.com",commits:1},{name:"Frank Prößdorf",email:"frank@naa.li",commits:1},{name:"Wolfgang Hobmaier",email:"wolfgang.hobmaier@sensoring.de",commits:1}]}}},4902:(n,s,a)=>{a.r(s),a.d(s,{default:()=>X});var e=a(6252);const t=(0,e._)("h1",{id:"dependency-injection-or-ioc",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#dependency-injection-or-ioc","aria-hidden":"true"},"#"),(0,e.Uk)(" Dependency injection or IOC")],-1),p=(0,e._)("p",null,"By default all the controllers are created by the auto-generated routes template using an empty default constructor. If you want to use dependency injection and let the DI-framework handle the creation of your controllers, we need set up an IoC Module tsoa can call.",-1),o=(0,e.Uk)("To tell "),c=(0,e._)("code",null,"tsoa",-1),r=(0,e.Uk)(" to use your DI-container you have to reference your module exporting the DI-container in the "),l={href:"https://github.com/lukeautry/tsoa/blob/master/src/config.ts",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("config"),u=(0,e.Uk)(" file (e.g. "),k=(0,e._)("code",null,"tsoa.json",-1),m=(0,e.Uk)("):"),b=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;entryFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;spec&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;routes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;routesDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;middleware&quot;</span><span class="token operator">:</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;iocModule&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/ioc&quot;</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="ioc-module" tabindex="-1"><a class="header-anchor" href="#ioc-module" aria-hidden="true">#</a> IoC Module</h2><p>Now you can create a module that exports either a container or a function as <code>iocContainer</code>.</p><p>Containers must conform to the following interface.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IocContainer</span> <span class="token punctuation">{</span>\n  <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>controller<span class="token operator">:</span> <span class="token punctuation">{</span> prototype<span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Functions must conform to the following signature, where <code>request</code> is your web framework&#39;s request object.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IocContainerFactory</span> <span class="token operator">=</span> <span class="token punctuation">(</span>request<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> IocContainer<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/ioc.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> IocContainer<span class="token punctuation">,</span> IocContainerFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@tsoa/runtime&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Container <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;di-package&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Assign a container to `iocContainer`.</span>\n<span class="token keyword">const</span> iocContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Or assign a function with to `iocContainer`.</span>\n<span class="token keyword">const</span> iocContainer<span class="token operator">:</span> <span class="token function-variable function">IocContainerFactory</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>\n  request<span class="token operator">:</span> Request\n<span class="token punctuation">)</span><span class="token operator">:</span> IocContainer <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">container</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> container<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// export according to convention</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> iocContainer <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If you want to use a DI framework other than the examples below, adding it isn&#39;t hard. If you set an iocModule, tsoa will call this module (to get a <code>FooController</code>) with:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> iocContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./the/path/to/the/module/from/tsoa.json&quot;</span><span class="token punctuation">;</span>\n\niocContainer<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>FooController<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>FooController<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>If you wrap your DI&#39;s API or even a ControllerFactory to accept this call and respond with a FooController, it&#39;ll work.</p></div><h2 id="inversifyjs" tabindex="-1"><a class="header-anchor" href="#inversifyjs" aria-hidden="true">#</a> InversifyJS</h2>',11),d=(0,e.Uk)("Here is some example code to setup the container and your controller with inversify.js. Usually, you'll have to tell inversify how to create your controller, but since this is not supposed to cover inversify, we'll just refer to their "),y={href:"http://inversify.io/",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("docs"),f=(0,e.Uk)(". For convenience, we will use inversify-binding-controllers here, which makes it very simple to tell inversify how to create tsoa controllers. More information can be found "),v={href:"https://github.com/inversify/inversify-binding-decorators",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("here"),h=(0,e.Uk)("."),C=(0,e.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/ioc.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Container<span class="token punctuation">,</span> decorate<span class="token punctuation">,</span> injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;inversify&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> buildProviderModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;inversify-binding-decorators&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tsoa&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create a new container tsoa can use</span>\n<span class="token keyword">const</span> iocContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">decorate</span><span class="token punctuation">(</span><span class="token function">injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Controller<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Makes tsoa&#39;s Controller injectable</span>\n\n<span class="token comment">// make inversify aware of inversify-binding-decorators</span>\niocContainer<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token function">buildProviderModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// export according to convention</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> iocContainer <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',1),q=(0,e.Uk)("We usually don't want to create a new controller instance for every call, so let's create a convenience wrapper around "),x={href:"https://github.com/inversify/inversify-binding-decorators#fluent-binding-decorator",target:"_blank",rel:"noopener noreferrer"},_=(0,e._)("code",null,"@fluentProvide()",-1),S={class:"custom-container danger"},I=(0,e._)("p",{class:"custom-container-title"},"DANGER",-1),j=(0,e.Uk)("If you rely on controller state (for example, because you're using "),F=(0,e._)("code",null,"this.setHeaders",-1),U=(0,e.Uk)(" inherited by "),T={href:"https://tsoa-community.github.io/reference/classes/_tsoa_runtime.controller-1.html",target:"_blank",rel:"noopener noreferrer"},D=(0,e.Uk)("Controller"),P=(0,e.Uk)("), you need to inject a new Controller for every request. Instead of "),W=(0,e._)("code",null,"@provideSingleton",-1),M=(0,e.Uk)(", please make sure to use "),R=(0,e._)("code",null,"@fluentProvide",-1),E=(0,e.Uk)(" directly (which is the default way to "),H=(0,e._)("code",null,"fluentProvide(identifier).inTransientScope()",-1),A=(0,e.Uk)(")."),O=(0,e.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/util/provideSingleton.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> fluentProvide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;inversify-binding-decorators&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> interfaces <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;inversify&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">provideSingleton</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  identifier<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>ServiceIdentifier<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">fluentProvide</span><span class="token punctuation">(</span>identifier<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inSingletonScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Now, in our controllers, we can use <code>@provideSingleton()</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/users/usersController.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;tsoa&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> provideSingleton<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../inversify/ioc&#39;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">provideSingleton</span></span><span class="token punctuation">(</span>FooController<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">inject</span></span><span class="token punctuation">(</span>FooService<span class="token punctuation">)</span> <span class="token keyword">private</span> fooService<span class="token operator">:</span> FooService\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">provideSingleton</span></span><span class="token punctuation">(</span>FooService<span class="token punctuation">)</span> <span class="token comment">// or @provide(FooService)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FooService</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>\n    <span class="token comment">// maybe even more dependencies to be injected...</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="tsyringe" tabindex="-1"><a class="header-anchor" href="#tsyringe" aria-hidden="true">#</a> TSyringe</h2>',4),N=(0,e.Uk)("Here's an example using "),J={href:"https://github.com/microsoft/tsyringe",target:"_blank",rel:"noopener noreferrer"},Z=(0,e.Uk)("TSyringe"),B=(0,e.Uk)("."),G=(0,e.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/lib/tsyringeTsoaIocContainer.ts</span>\n<span class="token comment">// Target this file in your tsoa.json&#39;s &quot;iocModule&quot; property</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> IocContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tsoa/runtime&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> container <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;tsyringe&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> iocContainer<span class="token operator">:</span> IocContainer <span class="token operator">=</span> <span class="token punctuation">{</span>\n  get<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>controller<span class="token operator">:</span> <span class="token punctuation">{</span> prototype<span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> container<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">resolve</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>controller <span class="token keyword">as</span> <span class="token builtin">never</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/services/FooService.ts</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> singleton <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;tsyringe&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">singleton</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FooService</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/controllers/FooController.ts</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;tsoa&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;tsyringe&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> FooService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../services/FooService&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FooController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> fooService<span class="token operator">:</span> FooService<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="typescript-ioc" tabindex="-1"><a class="header-anchor" href="#typescript-ioc" aria-hidden="true">#</a> typescript-ioc</h2>',4),L=(0,e.Uk)("Here is some example code to setup the controller with "),Y={href:"https://github.com/thiagobustamante/typescript-ioc",target:"_blank",rel:"noopener noreferrer"},z=(0,e.Uk)("typescript-ioc"),K=(0,e.Uk)("."),Q=(0,e.uE)('<p><code>./controllers/fooController.ts</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;tsoa&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Inject<span class="token punctuation">,</span> Singleton <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typescript-ioc&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FooController</span> <span class="token punctuation">{</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span>\n  <span class="token keyword">private</span> fooService<span class="token operator">:</span> FooService\n  <span class="token operator">...</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Singleton</span></span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FooService</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>The controllers need to be included in the application in order to be linked.</p><p><code>index.ts</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;./controllers/fooController.ts&quot;</span>\n<span class="token operator">...</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',5),V={},X=(0,a(3744).Z)(V,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,p,(0,e._)("p",null,[o,c,r,(0,e._)("a",l,[i,(0,e.Wm)(a)]),u,k,m]),b,(0,e._)("p",null,[d,(0,e._)("a",y,[g,(0,e.Wm)(a)]),f,(0,e._)("a",v,[w,(0,e.Wm)(a)]),h]),C,(0,e._)("p",null,[q,(0,e._)("a",x,[_,(0,e.Wm)(a)])]),(0,e._)("div",S,[I,(0,e._)("p",null,[j,F,U,(0,e._)("a",T,[D,(0,e.Wm)(a)]),P,W,M,R,E,H,A])]),O,(0,e._)("p",null,[N,(0,e._)("a",J,[Z,(0,e.Wm)(a)]),B]),G,(0,e._)("p",null,[L,(0,e._)("a",Y,[z,(0,e.Wm)(a)]),K]),Q],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);