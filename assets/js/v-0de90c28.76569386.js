"use strict";(self.webpackChunktsoa_docs=self.webpackChunktsoa_docs||[]).push([[279],{5535:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-0de90c28",path:"/decorators.html",title:"Decorators",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Security",slug:"security",children:[]},{level:2,title:"Tags",slug:"tags",children:[]},{level:2,title:"OperationId",slug:"operationid",children:[]},{level:2,title:"Deprecated",slug:"deprecated",children:[{level:3,title:"Operations",slug:"operations",children:[]},{level:3,title:"Parameters (OpenAPI 3+ only)",slug:"parameters-openapi-3-only",children:[]},{level:3,title:"Schemas (OpenAPI 3+ only)",slug:"schemas-openapi-3-only",children:[]}]},{level:2,title:"Hidden",slug:"hidden",children:[]},{level:2,title:"Request",slug:"request",children:[]}],filePathRelative:"decorators.md",git:{updatedTime:1620757744e3,contributors:[{name:"WoH",email:"wolfgang.hobmaier@sensoring.de",commits:5},{name:"Alden Quimby",email:"alden@freewill.com",commits:1},{name:"Jon Jensen",email:"jonj@netflix.com",commits:1}]}}},3490:(n,s,a)=>{a.r(s),a.d(s,{default:()=>I});var e=a(6252);const p=(0,e._)("h1",{id:"decorators",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#decorators","aria-hidden":"true"},"#"),(0,e.Uk)(" Decorators")],-1),t=(0,e.Uk)("Please note that this Section only covers Decorators that are not described separately, such as "),o=(0,e._)("a",{href:"%22error-handling%22"},[(0,e._)("code",null,"@Response")],-1),c=(0,e.Uk)(" or "),r=(0,e._)("a",{href:"%22getting-started%22"},[(0,e._)("code",null,"@Parameters")],-1),l=(0,e.Uk)(". For a full overview, please check out the "),u={href:"https://tsoa-community.github.io/reference/index.html",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("API Reference"),k=(0,e.Uk)("."),d=(0,e.uE)('<h2 id="security" tabindex="-1"><a class="header-anchor" href="#security" aria-hidden="true">#</a> Security</h2><p>The <code>@Security</code> decorator can be used above controller methods to indicate that there should be authentication before running those methods. As described above, the authentication is done in a file that&#39;s referenced in tsoa&#39;s configuration. When using the <code>@Security</code> decorator, you can choose between having one or multiple authentication methods. If you choose to have multiple authentication methods, you can choose between having to pass one of the methods (OR):</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Security</span></span><span class="token punctuation">(</span><span class="token string">&#39;tsoa_auth&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;write:pets&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;read:pets&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Security</span></span><span class="token punctuation">(</span><span class="token string">&#39;api_key&#39;</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;OauthOrAPIkey&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">GetWithOrSecurity</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Request</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> request<span class="token operator">:</span> express<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>or having to pass all of them (AND):</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Security</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  tsoa_auth<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;write:pets&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;read:pets&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  api_key<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;OauthAndAPIkey&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">GetWithAndSecurity</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Request</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> request<span class="token operator">:</span> express<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="tags" tabindex="-1"><a class="header-anchor" href="#tags" aria-hidden="true">#</a> Tags</h2><p>Tags are defined with the <code>@Tags(&#39;tag1&#39;, &#39;tag2&#39;, ...)</code> decorator in the controllers and/or in the methods like in the following examples.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Get<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Response<span class="token punctuation">,</span> Tags <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tsoa&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Tags</span></span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Response</span></span><span class="token operator">&lt;</span>ErrorResponseModel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected error&quot;</span><span class="token punctuation">)</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&quot;UserInfo&quot;</span><span class="token punctuation">)</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Tags</span></span><span class="token punctuation">(</span><span class="token string">&quot;Info&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Get&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Request</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> request<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>UserResponseModel<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&quot;EditUser&quot;</span><span class="token punctuation">)</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Tags</span></span><span class="token punctuation">(</span><span class="token string">&quot;Edit&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Request</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> request<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something here</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>If you have a project that needs a description and/or external docs for tags, you can configure the internal generators to use the correct tags definitions and external docs by providing a tags property to spec property in tsoa.json.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;spec&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;tags&quot;</span><span class="token operator">:</span>  <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token string">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Operations about users&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;externalDocs&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token string">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Find out more about users&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://swagger.io&quot;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;routes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="operationid" tabindex="-1"><a class="header-anchor" href="#operationid" aria-hidden="true">#</a> OperationId</h2><p>Set operationId parameter under operation&#39;s path. Useful for use with OpenAPI code generation tool since this parameter is used to name the function generated in the client SDK.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">OperationId</span></span><span class="token punctuation">(</span><span class="token string">&#39;findDomain&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="deprecated" tabindex="-1"><a class="header-anchor" href="#deprecated" aria-hidden="true">#</a> Deprecated</h2>',14),b=(0,e.Uk)("OpenAPI allows you to deprecate "),m={href:"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#user-content-operationdeprecated",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("operations"),g=(0,e.Uk)(", "),y={href:"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#user-content-parameterdeprecated",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("parameters"),q=(0,e.Uk)(", and "),v={href:"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#user-content-schemadeprecated",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("schemas"),x=(0,e.Uk)(". This lets you indicate that certain endpoint/formats/etc. should no longer be used, while allowing clients time to migrate to the new approach."),U=(0,e.uE)('<p>To deprecate parts of your API, you can attach the <code>@Deprecated</code> decorator to class properties, methods, and parameters. For constructs that don&#39;t support decorators (e.g. interfaces and type aliases), you can use a <code>@deprecated</code> JSDoc annotation. Some examples:</p><h3 id="operations" tabindex="-1"><a class="header-anchor" href="#operations" aria-hidden="true">#</a> Operations</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Deprecated</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="parameters-openapi-3-only" tabindex="-1"><a class="header-anchor" href="#parameters-openapi-3-only" aria-hidden="true">#</a> Parameters (OpenAPI 3+ only)</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&quot;v2&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">findV2</span><span class="token punctuation">(</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Deprecated</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> dontUse<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="schemas-openapi-3-only" tabindex="-1"><a class="header-anchor" href="#schemas-openapi-3-only" aria-hidden="true">#</a> Schemas (OpenAPI 3+ only)</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">CreateUserRequest</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Deprecated</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> firstName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span>\n    <span class="token keyword">public</span> emailAddress<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Deprecated</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> icqHandle<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">CreateUserResponse</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/** <span class="token keyword">@deprecated</span> */</span> durationMs<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  details<span class="token operator">:</span> UserDetails<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">UserDetails</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/** <span class="token keyword">@deprecated</span> */</span> firstName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="hidden" tabindex="-1"><a class="header-anchor" href="#hidden" aria-hidden="true">#</a> Hidden</h2><p>Use on methods to exclude an endpoint from the generated OpenAPI Specification document.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Hidden</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Use on controllers to exclude all of its endpoints from the generated OpenAPI Specification document.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Hidden</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HiddenController</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Use on <code>@Query</code> parameters to exclude query params from the generated OpenAPI Specification document. The parameter must either allow undefined or have a default value to be hidden.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">find</span><span class="token punctuation">(</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> normalParam<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Hidden</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> defaultSecret <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Hidden</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> optionalSecret<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="request" tabindex="-1"><a class="header-anchor" href="#request" aria-hidden="true">#</a> Request</h2><p>To access the request object of express in a controller method use the <code>@Request</code>-decorator:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/users/usersController.ts</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> express <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Get<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tsoa&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> User<span class="token punctuation">,</span> UserCreationRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../models/user&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&quot;{userId}&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">getUser</span><span class="token punctuation">(</span>\n    userId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Request</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> request<span class="token operator">:</span> express<span class="token punctuation">.</span>Request\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// TODO: implement some code that uses the request as well</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>To access Koa&#39;s request object (which has the ctx object) in a controller method use the <code>@Request</code>-decorator:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/users/usersController.ts</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> koa <span class="token keyword">from</span> <span class="token string">&quot;koa&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Get<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tsoa&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> User<span class="token punctuation">,</span> UserCreationRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../models/user&quot;</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&quot;{userId}&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">getUser</span><span class="token punctuation">(</span>\n    userrId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Request</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> request<span class="token operator">:</span> koa<span class="token punctuation">.</span>Request\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> ctx <span class="token operator">=</span> request<span class="token punctuation">.</span>ctx<span class="token punctuation">;</span>\n    <span class="token comment">// TODO: implement some code that uses the request as well</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>Note that the parameter <code>request</code> does not appear in your OAS file. Likewise you can use the decorator <code>@Inject</code> to mark a parameter as being injected manually and should be omitted in Spec generation. In this case you should write your own custom template where you inject the needed objects/values in the method-call.</p></div>',20),P={},I=(0,a(3744).Z)(P,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,o,c,r,l,(0,e._)("a",u,[i,(0,e.Wm)(a)]),k]),d,(0,e._)("p",null,[b,(0,e._)("a",m,[h,(0,e.Wm)(a)]),g,(0,e._)("a",y,[f,(0,e.Wm)(a)]),q,(0,e._)("a",v,[w,(0,e.Wm)(a)]),x]),U],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);