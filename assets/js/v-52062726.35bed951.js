"use strict";(self.webpackChunktsoa_docs=self.webpackChunktsoa_docs||[]).push([[14],{2240:(e,i,a)=>{a.r(i),a.d(i,{data:()=>t});const t={key:"v-52062726",path:"/introduction.html",title:"Introduction",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Goal",slug:"goal",children:[]},{level:2,title:"Philosophy",slug:"philosophy",children:[]}],filePathRelative:"introduction.md",git:{updatedTime:1588193186e3,contributors:[{name:"WoH",email:"wolfgang.hobmaier@sensoring.de",commits:1}]}}},7885:(e,i,a)=>{a.r(i),a.d(i,{default:()=>r});const t=(0,a(6252).uE)('<h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><p>tsoa is a framework with integrated OpenAPI compiler to build Node.js serve-side applications using TypeScript. It can target express, hapi, koa and more frameworks at runtime. tsoa applications are type-safe by default and handle runtime validation seamlessly.</p><h2 id="goal" tabindex="-1"><a class="header-anchor" href="#goal" aria-hidden="true">#</a> Goal</h2><ul><li>TypeScript controllers and models as the single source of truth for your API</li><li>A valid OpenAPI (formerly Swagger) spec (2.0 or 3.0) is generated from your controllers and models, including: <ul><li>Paths (e.g. GET /Users)</li><li>Definitions based on TypeScript interfaces (models)</li><li>Parameters/model properties marked as required or optional based on TypeScript (e.g. myProperty?: string is optional in the OpenAPI spec)</li><li>jsDoc supported for object descriptions (most other metadata can be inferred from TypeScript types)</li></ul></li><li>Routes are generated for middleware of choice <ul><li>Express, Hapi, and Koa currently supported, other middleware can be supported using a simple handlebars template</li><li>Seamless runtime validation</li></ul></li></ul><h2 id="philosophy" tabindex="-1"><a class="header-anchor" href="#philosophy" aria-hidden="true">#</a> Philosophy</h2><ul><li>Rely on TypeScript type annotations to generate API metadata if possible</li><li>If regular type annotations aren&#39;t an appropriate way to express metadata, use decorators</li><li>Use jsdoc for pure text metadata (e.g. endpoint descriptions)</li><li>Minimize boilerplate</li><li>Models are best represented by interfaces (pure data structures), but can also be represented by classes</li><li>Runtime validation of tsoa should behave as closely as possible to the specifications that the generated OpenAPI 2/3 schema describes. Any differences in validation logic are clarified by logging warnings during the generation of the OpenAPI Specification (OAS) and/or the routes. <ul><li>Please note that by enabling OpenAPI 3 you minimize the chances of divergent validation logic since OpenAPI 3 has a more expressive schema syntax.</li></ul></li></ul>',6),o={},r=(0,a(3744).Z)(o,[["render",function(e,i){return t}]])},3744:(e,i)=>{i.Z=(e,i)=>{for(const[a,t]of i)e[a]=t;return e}}}]);